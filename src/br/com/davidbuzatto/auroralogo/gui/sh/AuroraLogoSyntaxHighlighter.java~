/* The following code was generated by JFlex 1.4.1 on 23/06/2022 22:43 */

/*
 * Generated on 6/23/22, 9:30 PM
 */
package br.com.davidbuzatto.auroralogo.gui.sh;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AuroraLogoSyntaxHighlighter extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\66\1\67\1\15"+
    "\1\20\1\1\1\35\1\33\1\7\2\32\1\23\1\34\1\31\1\27"+
    "\1\25\1\22\1\4\3\16\4\6\2\3\1\45\1\31\1\64\1\63"+
    "\1\70\1\31\1\20\4\5\1\5\1\5\7\1\1\73\1\72\5\1"+
    "\1\1\5\1\1\32\1\11\1\32\1\17\1\2\1\0\1\52\1\14"+
    "\1\53\1\51\1\26\1\42\1\56\1\36\1\43\1\62\1\1\1\44"+
    "\1\54\1\13\1\55\1\40\1\47\1\50\1\41\1\37\1\12\1\57"+
    "\1\46\1\24\1\1\1\61\1\30\1\71\1\30\1\31\104\0\1\74"+
    "\37\0\1\60\5\0\1\65\uff16\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\2\7\2\1\1\10\1\1\1\11\13\1\1\11\1\7"+
    "\1\1\1\7\2\1\1\12\1\13\4\12\1\14\5\12"+
    "\1\15\3\12\1\0\1\16\1\0\2\16\1\3\1\17"+
    "\1\0\1\3\1\0\2\1\2\5\1\20\1\21\1\22"+
    "\1\23\5\1\1\11\21\1\2\0\1\24\4\0\1\25"+
    "\11\0\1\23\1\0\1\26\1\3\1\27\2\3\1\17"+
    "\1\3\1\0\2\1\1\5\1\30\1\5\1\31\10\1"+
    "\1\11\22\1\1\11\20\0\1\3\1\0\2\1\1\5"+
    "\1\0\13\1\1\32\5\1\6\0\1\33\2\0\1\34"+
    "\2\0\1\35\1\0\1\3\1\0\1\5\12\1\12\0"+
    "\1\3\1\5\5\1\22\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\364\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\364"+
    "\0\u0356\0\u0393\0\364\0\u03d0\0\364\0\u040d\0\u044a\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u06ac\0\u0763\0\u07a0\0\u07dd\0\364"+
    "\0\u081a\0\u0857\0\u0894\0\u08d1\0\364\0\u090e\0\u094b\0\u0988"+
    "\0\u09c5\0\u0a02\0\364\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0356\0\u0b70\0\u0bad\0\u0bea\0\364\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\364\0\364\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\364\0\u1441\0\u147e\0\u14bb\0\u14f8\0\364\0\u1535"+
    "\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u0bad\0\u17d4\0\364\0\u1811\0\u184e\0\u0c27"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\364\0\u19bc\0\364"+
    "\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4"+
    "\0\u0131\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f"+
    "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307"+
    "\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef"+
    "\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u0131\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52"+
    "\0\u2c8f\0\u2ccc\0\u0726\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd"+
    "\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5"+
    "\0\u3022\0\u305f\0\u2ae4\0\u309c\0\u2b9b\0\u30d9\0\u2c52\0\u3116"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6"+
    "\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce"+
    "\0\u370b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\7\1\11\1\12"+
    "\1\5\1\6\1\13\1\14\1\15\1\7\2\5\1\16"+
    "\1\17\1\20\1\6\1\21\1\22\1\20\1\23\1\5"+
    "\1\23\1\24\1\25\1\20\1\6\1\26\1\27\1\30"+
    "\2\6\1\31\1\5\2\6\1\32\1\33\1\34\1\35"+
    "\1\36\1\6\1\37\1\40\1\5\2\6\1\41\1\42"+
    "\1\43\1\16\2\44\1\45\1\6\1\46\1\5\10\47"+
    "\1\50\12\47\1\51\12\47\1\52\3\47\1\53\3\47"+
    "\1\54\36\47\1\55\12\47\1\56\12\47\1\57\3\47"+
    "\1\60\3\47\1\61\26\47\10\62\1\63\25\62\1\64"+
    "\3\62\1\65\3\62\1\66\26\62\76\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\12\6\1\0\2\6\7\0\2\6"+
    "\1\0\3\70\2\7\1\70\1\7\2\0\4\70\1\0"+
    "\1\7\1\0\1\70\3\0\1\70\1\71\1\72\7\0"+
    "\7\70\1\0\15\70\2\0\1\70\4\0\6\70\2\7"+
    "\1\70\1\7\2\0\4\70\1\0\1\7\1\0\1\70"+
    "\3\0\1\73\1\71\1\72\7\0\7\70\1\0\15\70"+
    "\2\0\1\70\4\0\3\70\7\74\1\75\1\76\1\77"+
    "\63\74\1\0\6\6\2\0\1\67\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\12\6"+
    "\1\100\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\2\6\1\101\1\6\1\102\5\6\1\0"+
    "\2\6\7\0\2\6\1\0\10\15\1\103\1\104\3\15"+
    "\1\105\57\15\21\0\1\16\44\0\1\16\30\0\1\106"+
    "\1\107\54\0\2\110\1\0\1\110\7\0\1\110\57\0"+
    "\6\6\2\0\1\67\1\6\1\111\1\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\3\6\1\112\3\6"+
    "\1\0\12\6\1\0\2\6\7\0\2\6\34\0\1\20"+
    "\42\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\2\6\1\113"+
    "\7\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\5\6\1\114\1\6\1\0\2\6\1\115\7\6"+
    "\1\0\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\116\7\0"+
    "\7\6\1\0\12\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\117\7\0\5\6\1\120\1\6\1\0\4\6"+
    "\1\121\5\6\1\0\2\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\122\7\0\7\6\1\0\4\6\1\123\2\6\1\124"+
    "\2\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\125"+
    "\7\0\7\6\1\0\12\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\2\6\1\126\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\127\3\6\1\0\1\130\1\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\5\6\1\131\1\132\1\0\7\6"+
    "\1\133\2\6\1\0\2\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\4\6\1\134\5\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\5\6"+
    "\1\135\1\6\1\0\2\6\1\136\7\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\137\7\0\7\6\1\0"+
    "\12\6\1\0\2\6\7\0\2\6\64\0\1\20\40\0"+
    "\1\25\33\0\1\20\77\0\1\140\77\0\1\20\4\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\1\141\10\47\1\0\12\47\1\0\12\47"+
    "\1\0\3\47\1\0\3\47\1\0\26\47\22\0\1\142"+
    "\111\0\1\143\74\0\1\144\3\0\1\145\77\0\1\146"+
    "\50\0\1\147\111\0\1\150\74\0\1\151\3\0\1\152"+
    "\77\0\1\153\26\0\10\62\1\0\25\62\1\0\3\62"+
    "\1\0\3\62\1\0\26\62\37\0\1\154\74\0\1\155"+
    "\3\0\1\156\77\0\1\157\40\0\1\160\62\0\7\70"+
    "\2\0\4\70\1\0\1\70\1\0\1\70\3\0\1\70"+
    "\1\0\1\70\7\0\7\70\1\0\15\70\2\0\1\70"+
    "\4\0\6\70\2\161\1\70\1\161\2\0\4\70\1\0"+
    "\1\161\1\0\1\70\3\0\1\70\1\0\1\70\1\162"+
    "\4\0\1\162\1\0\7\70\1\0\15\70\2\0\1\70"+
    "\4\0\6\70\4\163\2\0\3\70\1\163\1\0\1\163"+
    "\1\0\1\70\3\0\1\70\1\0\1\163\7\0\4\70"+
    "\1\163\2\70\1\0\3\70\3\163\7\70\2\0\1\70"+
    "\4\0\3\70\7\164\1\165\1\0\64\164\7\0\1\165"+
    "\65\0\4\164\1\166\1\164\1\167\1\170\1\0\1\74"+
    "\1\171\3\74\1\166\20\164\1\74\2\164\1\74\5\164"+
    "\1\74\24\164\55\0\1\172\20\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\4\6\1\173\5\6\1\0\2\6\7\0"+
    "\2\6\2\0\6\6\2\0\1\67\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\5\6\1\174\1\6"+
    "\1\0\12\6\1\0\2\6\7\0\2\6\1\0\11\103"+
    "\1\175\3\103\1\176\63\103\1\15\1\103\2\15\1\0"+
    "\1\15\1\177\4\15\20\103\1\15\2\103\1\15\5\103"+
    "\1\15\24\103\23\0\1\200\51\0\3\70\2\110\1\70"+
    "\1\110\2\0\4\70\1\0\1\110\1\0\1\70\3\0"+
    "\1\70\1\0\1\72\7\0\7\70\1\0\15\70\2\0"+
    "\1\70\4\0\3\70\1\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\1\6"+
    "\1\201\5\6\1\0\1\6\1\202\6\6\1\203\1\6"+
    "\1\0\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\1\6\1\204\3\6\1\205\4\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\7\6\1\206\2\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\1\6\1\207\1\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\12\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\210"+
    "\7\0\7\6\1\0\12\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\1\6\1\201\1\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\12\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\2\6\1\211\6\6\1\212\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\213\3\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\2\6\1\214"+
    "\7\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\2\6\1\215\4\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\5\6\1\216"+
    "\1\6\1\0\12\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\3\6\1\217\3\6\1\0\12\6"+
    "\1\0\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\3\6\1\220\3\6\1\0\12\6\1\0\2\6\7\0"+
    "\2\6\2\0\6\6\2\0\1\67\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\4\6"+
    "\1\221\5\6\1\0\2\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\4\6\1\222\5\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\1\223"+
    "\2\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\12\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\1\6\1\224\1\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\4\6"+
    "\1\225\1\6\1\217\3\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\4\6\1\226"+
    "\5\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\2\6\1\211\7\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\5\6\1\227"+
    "\1\6\1\0\10\6\1\230\1\6\1\0\2\6\7\0"+
    "\2\6\2\0\6\6\2\0\1\67\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\2\6"+
    "\1\231\7\6\1\0\2\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\7\6\1\232\2\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\2\6\1\233\7\6\1\0\1\234\1\6\7\0"+
    "\2\6\44\0\1\235\5\0\1\236\2\0\1\237\112\0"+
    "\1\20\41\0\1\240\75\0\1\241\100\0\1\242\76\0"+
    "\1\243\65\0\1\244\75\0\1\245\100\0\1\246\76\0"+
    "\1\247\65\0\1\250\75\0\1\251\100\0\1\252\76\0"+
    "\1\253\31\0\4\254\5\0\1\254\1\0\1\254\7\0"+
    "\1\254\13\0\1\254\6\0\3\254\21\0\3\70\2\161"+
    "\1\70\1\161\2\0\4\70\1\0\1\161\1\0\1\70"+
    "\3\0\1\70\1\0\1\70\7\0\7\70\1\0\15\70"+
    "\2\0\1\70\4\0\3\70\3\0\2\161\1\0\1\161"+
    "\7\0\1\161\56\0\7\164\1\75\1\0\70\164\1\167"+
    "\1\164\1\167\1\165\1\0\5\164\1\167\62\164\1\74"+
    "\1\164\1\74\1\165\1\0\5\164\1\74\61\164\4\255"+
    "\1\75\1\0\3\164\1\255\1\164\1\255\7\164\1\255"+
    "\13\164\1\255\6\164\3\255\21\164\66\0\1\256\7\0"+
    "\6\6\2\0\1\67\1\6\1\257\1\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\12\6"+
    "\1\0\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\260\1\0\1\6\7\0"+
    "\7\6\1\0\12\6\1\0\2\6\7\0\2\6\1\0"+
    "\10\103\1\0\67\103\4\261\2\103\1\175\2\103\1\261"+
    "\1\176\1\261\7\103\1\261\13\103\1\261\6\103\3\261"+
    "\21\103\1\0\6\6\2\0\1\67\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\12\6"+
    "\1\262\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\1\263\2\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\12\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\2\6\1\264"+
    "\7\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\1\265\2\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\12\6\1\0\2\6\7\0"+
    "\2\6\2\0\6\6\2\0\1\67\1\226\2\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\2\6\1\266\7\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\5\6\1\231\4\6"+
    "\1\0\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\5\6\1\267\4\6\1\0\2\6\7\0"+
    "\2\6\2\0\6\6\2\0\1\67\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\1\6\1\260\5\6"+
    "\1\0\12\6\1\0\2\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\4\6\1\270\5\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\2\6"+
    "\1\231\4\6\1\0\12\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\4\6\1\271"+
    "\5\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\5\6\1\272\1\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\12\6\1\0\1\211\1\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\4\6\1\211\5\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\273\7\0\7\6"+
    "\1\0\12\6\1\0\2\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\5\6\1\274\1\6\1\0\12\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\2\6\1\275\7\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\6\6\1\211\1\0\12\6"+
    "\1\0\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\12\6\1\0\1\217\1\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\1\6\1\260\1\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\12\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\2\6\1\260\7\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\3\6\1\276"+
    "\3\6\1\0\12\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\277\7\0\7\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\4\6\1\133\5\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\3\6\1\300\3\6\1\0\12\6"+
    "\1\0\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\3\6\1\301\2\6\1\302\3\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\303\7\0\7\6"+
    "\1\0\12\6\1\0\2\6\7\0\2\6\57\0\1\304"+
    "\61\0\1\305\57\0\1\306\23\0\1\307\62\0\1\310"+
    "\101\0\1\311\55\0\1\241\73\0\1\312\107\0\1\313"+
    "\101\0\1\314\55\0\1\245\73\0\1\315\107\0\1\316"+
    "\101\0\1\317\55\0\1\251\73\0\1\320\52\0\4\321"+
    "\5\0\1\321\1\0\1\321\7\0\1\321\13\0\1\321"+
    "\6\0\3\321\21\0\3\164\4\322\1\75\1\0\3\164"+
    "\1\322\1\164\1\322\7\164\1\322\13\164\1\322\6\164"+
    "\3\322\21\164\65\0\1\323\10\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\5\6\1\260\4\6\1\0\2\6\7\0"+
    "\2\6\2\0\6\6\2\0\1\67\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\7\6"+
    "\1\211\2\6\1\0\2\6\7\0\2\6\1\0\3\103"+
    "\4\324\2\103\1\175\2\103\1\324\1\176\1\324\7\103"+
    "\1\324\13\103\1\324\6\103\3\324\21\103\55\0\1\25"+
    "\20\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\4\6\1\325"+
    "\5\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\7\6\1\326\2\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\327\7\0\7\6\1\0"+
    "\12\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\330"+
    "\7\0\7\6\1\0\12\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\223\7\0\7\6\1\0\12\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\1\6"+
    "\1\331\1\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\12\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\1\6\1\332\1\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\12\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\1\6\1\217\5\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\1\6\1\333"+
    "\1\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\12\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\231"+
    "\1\0\1\6\7\0\7\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\334\7\0\7\6\1\0"+
    "\12\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\1\6\1\272\1\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\3\6\1\335"+
    "\3\6\1\0\12\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\211\7\0\7\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\336\7\0\7\6\1\0"+
    "\12\6\1\0\2\6\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\3\6\1\211\3\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\13\0\1\337\124\0\1\340\45\0\1\341"+
    "\124\0\1\341\72\0\1\241\3\0\1\311\51\0\1\342"+
    "\53\0\1\312\1\343\4\312\1\343\2\0\3\312\1\0"+
    "\1\312\1\0\1\343\1\0\1\312\1\343\1\312\1\343"+
    "\1\312\1\343\1\0\5\343\7\312\1\343\12\312\1\0"+
    "\2\312\1\343\3\0\1\343\2\0\2\312\42\0\1\245"+
    "\3\0\1\314\51\0\1\344\53\0\1\315\1\345\4\315"+
    "\1\345\2\0\3\315\1\0\1\315\1\0\1\345\1\0"+
    "\1\315\1\345\1\315\1\345\1\315\1\345\1\0\5\345"+
    "\7\315\1\345\12\315\1\0\2\315\1\345\3\0\1\345"+
    "\2\0\2\315\42\0\1\251\3\0\1\317\51\0\1\346"+
    "\53\0\1\320\1\347\4\320\1\347\2\0\3\320\1\0"+
    "\1\320\1\0\1\347\1\0\1\320\1\347\1\320\1\347"+
    "\1\320\1\347\1\0\5\347\7\320\1\347\12\320\1\0"+
    "\2\320\1\347\3\0\1\347\2\0\2\320\4\0\4\350"+
    "\5\0\1\350\1\0\1\350\7\0\1\350\13\0\1\350"+
    "\6\0\3\350\21\0\3\164\4\351\1\75\1\0\3\164"+
    "\1\351\1\164\1\351\7\164\1\351\13\164\1\351\6\164"+
    "\3\351\21\164\3\103\4\352\2\103\1\175\2\103\1\352"+
    "\1\176\1\352\7\103\1\352\13\103\1\352\6\103\3\352"+
    "\21\103\1\0\6\6\2\0\1\67\1\6\1\210\1\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\12\6\1\0\2\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\3\6\1\353\3\6\1\0\12\6\1\0"+
    "\2\6\7\0\2\6\2\0\6\6\2\0\1\67\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\2\6\1\354\7\6\1\0\2\6\7\0\2\6"+
    "\2\0\6\6\2\0\1\67\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\11\6\1\355"+
    "\1\0\2\6\7\0\2\6\2\0\6\6\2\0\1\67"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\1\6\1\231\5\6\1\0\12\6\1\0\2\6\7\0"+
    "\2\6\2\0\6\6\2\0\1\67\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\12\6"+
    "\1\0\1\6\1\217\7\0\2\6\2\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\10\6\1\203\1\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\6\6\1\260"+
    "\1\0\12\6\1\0\2\6\7\0\2\6\2\0\6\6"+
    "\2\0\1\67\1\356\2\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\6\6\1\357"+
    "\1\0\12\6\1\0\2\6\7\0\2\6\53\0\1\360"+
    "\50\0\1\361\123\0\1\362\41\0\1\312\74\0\1\315"+
    "\74\0\1\320\55\0\4\6\5\0\1\6\1\0\1\6"+
    "\7\0\1\6\13\0\1\6\6\0\3\6\21\0\3\164"+
    "\4\74\1\75\1\0\3\164\1\74\1\164\1\74\7\164"+
    "\1\74\13\164\1\74\6\164\3\74\21\164\3\103\4\15"+
    "\2\103\1\175\2\103\1\15\1\176\1\15\7\103\1\15"+
    "\13\103\1\15\6\103\3\15\21\103\1\0\6\6\2\0"+
    "\1\67\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\3\6\1\231\3\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\3\6\1\217\6\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\133\7\0\7\6\1\0\12\6\1\0\2\6"+
    "\7\0\2\6\2\0\6\6\2\0\1\67\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\2\6\1\217\7\6\1\0\2\6\7\0\2\6\2\0"+
    "\6\6\2\0\1\67\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\1\260\6\6\1\0\12\6\1\0"+
    "\2\6\7\0\2\6\45\0\1\363\100\0\1\364\74\0"+
    "\1\365\112\0\1\366\34\0\1\367\134\0\1\370\60\0"+
    "\1\20\35\0\1\371\130\0\1\372\5\0\1\373\56\0"+
    "\1\374\47\0\1\375\74\0\1\376\110\0\1\377\74\0"+
    "\1\20\134\0\1\u0100\74\0\1\u0101\51\0\1\235\102\0"+
    "\1\375\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14152];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\5\1\1\11\2\1\1\11"+
    "\1\1\1\11\22\1\1\11\4\1\1\11\5\1\1\11"+
    "\3\1\1\0\1\1\1\0\3\1\1\11\1\0\1\1"+
    "\1\0\4\1\2\11\31\1\2\0\1\11\4\0\1\11"+
    "\11\0\1\1\1\0\2\1\1\11\4\1\1\0\3\1"+
    "\1\11\1\1\1\11\34\1\20\0\1\1\1\0\3\1"+
    "\1\0\21\1\6\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\13\1\12\0\7\1\22\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AuroraLogoSyntaxHighlighter() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AuroraLogoSyntaxHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AuroraLogoSyntaxHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 30: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 23: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 33: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 35: break;
        case 24: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 36: break;
        case 19: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 37: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 38: break;
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 40: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 26: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 45: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 46: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 47: break;
        case 15: 
          { addToken(Token.ERROR_CHAR);
          }
        case 48: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 49: break;
        case 25: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 50: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 14: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 10: 
          { 
          }
        case 57: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 258: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 259: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 260: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 261: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
