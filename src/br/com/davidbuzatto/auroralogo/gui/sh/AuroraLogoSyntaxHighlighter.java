/* The following code was generated by JFlex 1.4.1 on 30/06/2022 23:53 */

/*
 * Generated on 6/23/22, 9:30 PM
 */
package br.com.davidbuzatto.auroralogo.gui.sh;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AuroraLogoSyntaxHighlighter extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\51\1\65\1\15"+
    "\1\20\1\1\1\35\1\33\1\7\2\32\1\23\1\34\1\31\1\27"+
    "\1\25\1\22\1\4\3\16\4\6\2\3\1\45\1\31\1\67\1\66"+
    "\1\70\1\31\1\20\4\5\1\71\1\5\7\1\1\72\1\74\5\1"+
    "\1\75\5\1\1\32\1\11\1\32\1\17\1\2\1\0\1\47\1\14"+
    "\1\55\1\56\1\26\1\42\1\57\1\36\1\43\1\63\1\1\1\44"+
    "\1\52\1\13\1\53\1\40\1\60\1\50\1\41\1\37\1\12\1\62"+
    "\1\46\1\24\1\1\1\54\1\30\1\77\1\30\1\31\104\0\1\73"+
    "\35\0\1\64\1\0\1\61\5\0\1\76\uff16\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\4\1\1\7\7\1\1\6\14\1\1\10\1\11\4\10"+
    "\1\12\5\10\1\13\3\10\1\0\1\14\1\0\2\14"+
    "\1\3\1\15\1\0\1\3\1\0\2\1\2\5\1\16"+
    "\1\17\1\20\1\21\1\22\3\1\1\0\31\1\3\0"+
    "\1\23\4\0\1\24\11\0\1\22\1\0\1\25\1\3"+
    "\1\26\2\3\1\15\1\3\1\0\2\1\1\5\1\27"+
    "\1\5\1\30\5\1\1\31\32\1\20\0\1\3\1\0"+
    "\2\1\1\5\1\0\23\1\6\0\1\32\2\0\1\33"+
    "\2\0\1\34\1\0\1\3\1\0\1\5\7\1\1\35"+
    "\4\1\12\0\1\3\1\5\5\1\22\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0100\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0100\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940"+
    "\0\u0100\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0100\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0100\0\u0bc0\0\u0c00\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u03c0\0\u0d00\0\u0d40\0\u0d80\0\u0100\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0100\0\u0100\0\u0f80"+
    "\0\u0100\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u0380\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500"+
    "\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u0100\0\u17c0\0\u1800\0\u1840\0\u1880\0\u0100"+
    "\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\u1b40\0\u0d40\0\u1b80\0\u0100\0\u1bc0\0\u1c00"+
    "\0\u0dc0\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u0100\0\u1d80"+
    "\0\u0100\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u0100\0\u1f00"+
    "\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100"+
    "\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300"+
    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500"+
    "\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700"+
    "\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900"+
    "\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00"+
    "\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00"+
    "\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00"+
    "\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100"+
    "\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300"+
    "\0\u3340\0\u08c0\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0"+
    "\0\u3500\0\u3540\0\u0100\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680"+
    "\0\u36c0\0\u3700\0\u3740\0\u3140\0\u3780\0\u3200\0\u37c0\0\u32c0"+
    "\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0"+
    "\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0"+
    "\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0"+
    "\0\u3e00\0\u3e40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\7\1\11\1\12"+
    "\1\5\1\6\1\13\1\14\1\15\1\7\2\5\1\16"+
    "\1\17\1\20\1\6\1\21\1\22\1\20\1\23\1\5"+
    "\1\23\1\24\2\20\1\6\1\25\1\26\1\27\2\6"+
    "\1\30\1\5\1\6\1\31\1\32\1\33\1\34\2\6"+
    "\1\35\1\36\1\37\1\6\1\5\1\40\1\6\1\5"+
    "\2\41\1\42\1\41\1\43\1\44\1\5\1\45\1\6"+
    "\1\46\1\47\10\50\1\51\12\50\1\52\12\50\1\53"+
    "\3\50\1\54\3\50\1\55\41\50\1\56\12\50\1\57"+
    "\12\50\1\60\3\50\1\61\3\50\1\62\31\50\10\63"+
    "\1\64\25\63\1\65\3\63\1\66\3\63\1\67\31\63"+
    "\101\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\2\0"+
    "\3\71\2\7\1\71\1\7\2\0\4\71\1\0\1\7"+
    "\1\0\1\71\3\0\1\71\1\72\1\73\7\0\7\71"+
    "\1\0\3\71\1\0\13\71\4\0\6\71\1\0\3\71"+
    "\2\7\1\71\1\7\2\0\4\71\1\0\1\7\1\0"+
    "\1\71\3\0\1\74\1\72\1\73\7\0\7\71\1\0"+
    "\3\71\1\0\13\71\4\0\6\71\1\0\7\75\1\76"+
    "\1\77\1\100\66\75\1\0\6\6\2\0\1\70\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\3\6\1\0\7\6\1\101\2\6\5\0\2\6"+
    "\1\0\2\6\3\0\6\6\2\0\1\70\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\1\6\1\102\1\103\1\0\7\6\1\0\2\6\5\0"+
    "\2\6\1\0\2\6\2\0\10\15\1\104\1\105\3\15"+
    "\1\106\62\15\21\0\1\16\27\0\1\16\50\0\1\107"+
    "\1\110\25\0\1\111\77\0\1\111\31\0\2\112\1\0"+
    "\1\112\7\0\1\112\62\0\6\6\2\0\1\70\1\6"+
    "\1\113\1\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\3\6\1\114\3\6\1\0\3\6\1\0\1\115"+
    "\6\6\1\0\2\6\5\0\2\6\1\0\2\6\35\0"+
    "\1\116\45\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\2\6"+
    "\1\117\1\0\7\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\5\6\1\120\1\6"+
    "\1\0\1\6\1\121\1\122\1\0\1\6\1\123\5\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\124\7\0\7\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\125"+
    "\7\0\5\6\1\126\1\6\1\0\1\6\1\127\1\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\2\6\1\130\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\3\6"+
    "\1\0\1\131\1\6\1\132\4\6\1\0\2\6\5\0"+
    "\2\6\1\0\2\6\3\0\6\6\2\0\1\70\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\133\7\0\7\6"+
    "\1\0\1\6\1\134\1\6\1\0\1\6\1\135\5\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\23\0\1\16"+
    "\3\0\1\111\23\0\1\16\27\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\136\7\0"+
    "\7\6\1\0\1\6\1\137\1\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\5\6\1\140\1\141\1\0\3\6\1\0\1\6"+
    "\1\142\5\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\143\7\0\5\6\1\144\1\6\1\0"+
    "\3\6\1\0\7\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\5\6\1\145\1\6"+
    "\1\0\2\6\1\146\1\0\7\6\1\0\2\6\5\0"+
    "\2\6\1\0\2\6\3\0\6\6\2\0\1\70\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\147\7\0\7\6"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\1\150\4\0"+
    "\2\6\1\0\2\6\53\0\1\111\14\0\1\116\40\0"+
    "\1\116\21\0\1\111\14\0\1\116\12\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\3\6\1\111\7\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\3\6\1\0\7\6\1\0\2\6\5\0"+
    "\2\6\1\151\2\6\3\0\6\6\2\0\1\70\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\1\6\1\43\53\0\1\152\125\0\1\116\10\50"+
    "\1\0\12\50\1\0\12\50\1\0\3\50\1\0\3\50"+
    "\1\0\31\50\22\0\1\153\114\0\1\154\77\0\1\155"+
    "\3\0\1\156\102\0\1\157\53\0\1\160\114\0\1\161"+
    "\77\0\1\162\3\0\1\163\102\0\1\164\31\0\10\63"+
    "\1\0\25\63\1\0\3\63\1\0\3\63\1\0\31\63"+
    "\37\0\1\165\77\0\1\166\3\0\1\167\102\0\1\170"+
    "\43\0\1\171\65\0\7\71\2\0\4\71\1\0\1\71"+
    "\1\0\1\71\3\0\1\71\1\0\1\71\7\0\7\71"+
    "\1\0\3\71\1\0\13\71\4\0\6\71\1\0\3\71"+
    "\2\172\1\71\1\172\2\0\4\71\1\0\1\172\1\0"+
    "\1\71\3\0\1\71\1\0\1\71\1\173\4\0\1\173"+
    "\1\0\7\71\1\0\3\71\1\0\13\71\4\0\6\71"+
    "\1\0\3\71\4\174\2\0\3\71\1\174\1\0\1\174"+
    "\1\0\1\71\3\0\1\71\1\0\1\174\7\0\4\71"+
    "\1\174\2\71\1\0\1\71\1\174\1\71\1\0\3\71"+
    "\2\174\6\71\4\0\1\174\5\71\1\0\7\175\1\176"+
    "\1\0\67\175\7\0\1\176\70\0\4\175\1\177\1\175"+
    "\1\200\1\201\1\0\1\75\1\202\3\75\1\177\20\175"+
    "\1\75\2\175\1\75\5\175\1\75\27\175\53\0\1\203"+
    "\25\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\5\6\1\204\1\6\1\0"+
    "\3\6\1\0\7\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\1\6"+
    "\1\205\1\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\2\0\11\104\1\206\3\104\1\207\66\104"+
    "\1\15\1\104\2\15\1\0\1\15\1\210\4\15\20\104"+
    "\1\15\2\104\1\15\5\104\1\15\27\104\23\0\1\211"+
    "\54\0\3\71\2\112\1\71\1\112\2\0\4\71\1\0"+
    "\1\112\1\0\1\71\3\0\1\71\1\0\1\73\7\0"+
    "\7\71\1\0\3\71\1\0\13\71\4\0\6\71\2\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\1\6\1\212\5\6\1\0\3\6"+
    "\1\0\5\6\1\213\1\214\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\3\0\6\6\2\0\1\70\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\3\6\1\0\3\6\1\215\2\6\1\216\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\3\6\1\217\7\6\1\0\2\6\5\0"+
    "\2\6\1\0\2\6\3\0\6\6\2\0\1\70\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\220\5\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\1\6\1\221\1\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\2\6\1\222\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\223"+
    "\7\0\7\6\1\0\3\6\1\0\7\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\2\6\1\43\1\0\7\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\1\6\1\212\1\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\3\6\1\217\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\2\6\1\115\1\0\7\6\1\0"+
    "\1\224\1\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\3\6\1\0\1\225\6\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\2\6\1\226\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\1\6\1\227\1\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\1\6\1\230\1\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\1\231\2\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\3\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\2\6\1\232\1\233\3\6"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\3\0\6\6\2\0\1\70\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\5\6\1\234"+
    "\1\6\1\0\3\6\1\0\7\6\1\0\2\6\5\0"+
    "\2\6\1\0\2\6\3\0\6\6\2\0\1\70\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\3\6"+
    "\1\222\3\6\1\0\3\6\1\0\7\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\1\6\1\235\1\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\5\6\1\236\1\6\1\0\3\6\1\0\5\6"+
    "\1\237\1\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\1\6\1\240\1\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\1\6\1\241\1\6\1\0\1\222\6\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\1\6\1\242\1\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\2\6\1\115\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\3\6\1\243\3\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\2\6\1\244\1\0\7\6"+
    "\1\0\1\245\1\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\2\6\1\246\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\247\5\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\2\6\1\250"+
    "\1\0\2\6\1\251\4\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\53\0\1\217\122\0\1\116\46\0\1\252"+
    "\6\0\1\253\3\0\1\254\60\0\1\255\100\0\1\256"+
    "\103\0\1\257\101\0\1\260\70\0\1\261\100\0\1\262"+
    "\103\0\1\263\101\0\1\264\70\0\1\265\100\0\1\266"+
    "\103\0\1\267\101\0\1\270\34\0\4\271\5\0\1\271"+
    "\1\0\1\271\7\0\1\271\13\0\1\271\4\0\1\271"+
    "\5\0\2\271\12\0\1\271\6\0\3\71\2\172\1\71"+
    "\1\172\2\0\4\71\1\0\1\172\1\0\1\71\3\0"+
    "\1\71\1\0\1\71\7\0\7\71\1\0\3\71\1\0"+
    "\13\71\4\0\6\71\4\0\2\172\1\0\1\172\7\0"+
    "\1\172\61\0\7\175\1\76\1\0\73\175\1\200\1\175"+
    "\1\200\1\176\1\0\5\175\1\200\65\175\1\75\1\175"+
    "\1\75\1\176\1\0\5\175\1\75\64\175\4\272\1\76"+
    "\1\0\3\175\1\272\1\175\1\272\7\175\1\272\13\175"+
    "\1\272\4\175\1\272\5\175\2\272\12\175\1\272\6\175"+
    "\51\0\1\273\27\0\6\6\2\0\1\70\3\6\1\0"+
    "\1\6\5\0\1\274\1\0\1\6\7\0\7\6\1\0"+
    "\3\6\1\0\7\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\1\6\1\275\1\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\2\0\10\104\1\0\72\104\4\276\2\104"+
    "\1\206\2\104\1\276\1\207\1\276\7\104\1\276\13\104"+
    "\1\276\4\104\1\276\5\104\2\276\12\104\1\276\6\104"+
    "\1\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\7\6\1\277\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\2\6\1\300\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\1\301\2\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\1\242\2\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\2\6\1\302"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\1\303\2\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\3\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\3\6\1\246\3\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\3\6"+
    "\1\0\3\6\1\304\3\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\3\0\6\6\2\0\1\70\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\1\6\1\115\1\6\1\0\7\6\1\0\2\6\5\0"+
    "\2\6\1\0\2\6\3\0\6\6\2\0\1\70\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\1\6"+
    "\1\274\5\6\1\0\3\6\1\0\7\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\1\6\1\305\1\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\2\6\1\246\4\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\1\6\1\306\1\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\5\6\1\307\1\6\1\0\3\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\2\6\1\310"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\6\6\1\115\1\0\3\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\5\6\1\311\1\6\1\0"+
    "\3\6\1\0\7\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\1\6\1\312\5\6"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\3\0\6\6\2\0\1\70\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\3\6\1\0\2\6\1\313\4\6\1\0\2\6\5\0"+
    "\2\6\1\0\2\6\3\0\6\6\2\0\1\70\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\236\5\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\3\6\1\43\3\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\314"+
    "\7\0\7\6\1\0\3\6\1\0\7\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\3\6\1\0\2\6\1\222\4\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\1\6\1\274\1\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\2\6\1\274\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\315\7\0\7\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\232"+
    "\7\0\7\6\1\0\3\6\1\0\7\6\1\0\2\6"+
    "\5\0\2\6\1\0\2\6\3\0\6\6\2\0\1\70"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\5\6\1\316\1\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\1\6\1\142\1\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\3\6\1\317\3\6\1\0\3\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\3\6\1\0\1\320"+
    "\3\6\1\321\2\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\322\7\0\7\6\1\0\3\6"+
    "\1\217\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\61\0\1\323\46\0\1\324\20\0\1\325\73\0\1\326"+
    "\74\0\1\327\104\0\1\330\60\0\1\256\76\0\1\331"+
    "\112\0\1\332\104\0\1\333\60\0\1\262\76\0\1\334"+
    "\112\0\1\335\104\0\1\336\60\0\1\266\76\0\1\337"+
    "\55\0\4\340\5\0\1\340\1\0\1\340\7\0\1\340"+
    "\13\0\1\340\4\0\1\340\5\0\2\340\12\0\1\340"+
    "\6\0\3\175\4\341\1\76\1\0\3\175\1\341\1\175"+
    "\1\341\7\175\1\341\13\175\1\341\4\175\1\341\5\175"+
    "\2\341\12\175\1\341\6\175\76\0\1\342\2\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\3\6\1\0\1\6\1\115"+
    "\5\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\3\6\1\0\3\6"+
    "\1\274\3\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\2\0\3\104\4\343\2\104\1\206\2\104\1\343\1\207"+
    "\1\343\7\104\1\343\13\104\1\343\4\104\1\343\5\104"+
    "\2\343\12\104\1\343\6\104\53\0\1\150\25\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\3\6\1\0\1\6\1\344"+
    "\5\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\1\6\1\345\1\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\346\7\0\7\6\1\0\3\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\347\7\0\7\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\231\7\0\7\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\1\6\1\350\1\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\1\6\1\351\1\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\246"+
    "\1\0\1\6\7\0\7\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\352\7\0\7\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\1\6\1\222\5\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\3\6\1\0\1\6\1\43"+
    "\5\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\3\6\1\353\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\1\6\1\311\1\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\1\6\1\354\1\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\3\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\4\6\1\355\2\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\3\6\1\356\3\6"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\3\0\6\6\2\0\1\70\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\357\7\0\7\6\1\0"+
    "\3\6\1\0\7\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\115\7\0\7\6\1\0\3\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\3\6\1\115\3\6\1\0"+
    "\3\6\1\0\7\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\14\0\1\360\100\0\1\361\127\0\1\361\76\0"+
    "\1\362\76\0\1\256\3\0\1\330\54\0\1\363\56\0"+
    "\1\331\1\364\4\331\1\364\2\0\3\331\1\0\1\331"+
    "\1\0\1\364\1\0\1\331\1\364\1\331\1\364\1\331"+
    "\1\364\1\0\5\364\7\331\1\364\3\331\1\0\7\331"+
    "\1\0\2\331\1\0\2\364\2\0\2\331\1\0\2\331"+
    "\43\0\1\262\3\0\1\333\54\0\1\365\56\0\1\334"+
    "\1\366\4\334\1\366\2\0\3\334\1\0\1\334\1\0"+
    "\1\366\1\0\1\334\1\366\1\334\1\366\1\334\1\366"+
    "\1\0\5\366\7\334\1\366\3\334\1\0\7\334\1\0"+
    "\2\334\1\0\2\366\2\0\2\334\1\0\2\334\43\0"+
    "\1\266\3\0\1\336\54\0\1\367\56\0\1\337\1\370"+
    "\4\337\1\370\2\0\3\337\1\0\1\337\1\0\1\370"+
    "\1\0\1\337\1\370\1\337\1\370\1\337\1\370\1\0"+
    "\5\370\7\337\1\370\3\337\1\0\7\337\1\0\2\337"+
    "\1\0\2\370\2\0\2\337\1\0\2\337\5\0\4\371"+
    "\5\0\1\371\1\0\1\371\7\0\1\371\13\0\1\371"+
    "\4\0\1\371\5\0\2\371\12\0\1\371\6\0\3\175"+
    "\4\372\1\76\1\0\3\175\1\372\1\175\1\372\7\175"+
    "\1\372\13\175\1\372\4\175\1\372\5\175\2\372\12\175"+
    "\1\372\6\175\3\104\4\373\2\104\1\206\2\104\1\373"+
    "\1\207\1\373\7\104\1\373\13\104\1\373\4\104\1\373"+
    "\5\104\2\373\12\104\1\373\6\104\1\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\3\6\1\374\3\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\1\6\1\223\1\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\3\6\1\0\7\6"+
    "\1\0\1\375\1\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\2\6\1\376\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\1\6\1\246\5\6\1\0\3\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\7\6\1\0\1\6\1\222\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\6\6\1\274\1\0\3\6"+
    "\1\0\7\6\1\0\2\6\5\0\2\6\1\0\2\6"+
    "\3\0\6\6\2\0\1\70\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\3\6\1\0"+
    "\5\6\1\213\1\6\1\0\2\6\5\0\2\6\1\0"+
    "\2\6\3\0\6\6\2\0\1\70\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\5\6\1\377\1\6"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\3\0\6\6\2\0\1\70\1\121\2\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\3\0\6\6\2\0\1\70\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\6\6\1\u0100"+
    "\1\0\3\6\1\0\7\6\1\0\2\6\5\0\2\6"+
    "\1\0\2\6\51\0\1\u0101\103\0\1\u0102\52\0\1\u0103"+
    "\73\0\1\331\77\0\1\334\77\0\1\337\60\0\4\6"+
    "\5\0\1\6\1\0\1\6\7\0\1\6\13\0\1\6"+
    "\4\0\1\6\5\0\2\6\12\0\1\6\6\0\3\175"+
    "\4\75\1\76\1\0\3\175\1\75\1\175\1\75\7\175"+
    "\1\75\13\175\1\75\4\175\1\75\5\175\2\75\12\175"+
    "\1\75\6\175\3\104\4\15\2\104\1\206\2\104\1\15"+
    "\1\207\1\15\7\104\1\15\13\104\1\15\4\104\1\15"+
    "\5\104\2\15\12\104\1\15\6\104\1\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\3\6\1\246\3\6\1\0\3\6\1\0\7\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\142\7\0\7\6\1\0\3\6\1\0\7\6\1\0"+
    "\2\6\5\0\2\6\1\0\2\6\3\0\6\6\2\0"+
    "\1\70\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\3\6\1\0\4\6\1\222\2\6"+
    "\1\0\2\6\5\0\2\6\1\0\2\6\3\0\6\6"+
    "\2\0\1\70\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\3\6\1\0\4\6\1\312"+
    "\2\6\1\0\2\6\5\0\2\6\1\0\2\6\3\0"+
    "\6\6\2\0\1\70\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\1\274\6\6\1\0\3\6\1\0"+
    "\7\6\1\0\2\6\5\0\2\6\1\0\2\6\46\0"+
    "\1\u0104\103\0\1\u0105\77\0\1\u0106\100\0\1\u0107\77\0"+
    "\1\u0108\54\0\1\u0109\120\0\1\116\103\0\1\u010a\4\0"+
    "\1\u010b\32\0\1\u010c\76\0\1\u010d\77\0\1\u010e\124\0"+
    "\1\u010f\111\0\1\u0110\54\0\1\116\77\0\1\u0111\114\0"+
    "\1\252\105\0\1\u0112\104\0\1\u010e\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\10\1\1\11\25\1\1\11"+
    "\4\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\3\1\1\11\1\0\1\1\1\0\4\1\2\11\1\1"+
    "\1\11\4\1\1\0\31\1\3\0\1\11\4\0\1\11"+
    "\11\0\1\1\1\0\2\1\1\11\4\1\1\0\3\1"+
    "\1\11\1\1\1\11\5\1\1\11\32\1\20\0\1\1"+
    "\1\0\3\1\1\0\23\1\6\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\10\1\1\11\4\1"+
    "\12\0\7\1\22\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AuroraLogoSyntaxHighlighter() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AuroraLogoSyntaxHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AuroraLogoSyntaxHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 30: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 22: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 33: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 35: break;
        case 23: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 36: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 37: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 38: break;
        case 25: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 40: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 29: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 45: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 46: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 47: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 48: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 49: break;
        case 24: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 50: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 17: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 8: 
          { 
          }
        case 57: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 275: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 276: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 277: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 278: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
