/* The following code was generated by JFlex 1.4.1 on 04/07/2022 15:33 */

/*
 * Generated on 6/23/22, 9:30 PM
 */
package br.com.davidbuzatto.auroralogo.gui.sh;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AuroraLogoSyntaxHighlighter extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\54\1\100\1\15"+
    "\1\20\1\1\1\35\1\33\1\7\2\32\1\23\1\34\1\31\1\27"+
    "\1\25\1\22\1\4\3\16\4\6\2\3\1\45\1\31\1\102\1\101"+
    "\1\103\1\31\1\20\1\50\2\5\1\60\1\56\1\47\2\1\1\61"+
    "\2\1\1\51\1\1\1\104\1\53\2\1\1\57\1\52\1\1\1\106"+
    "\1\55\4\1\1\32\1\11\1\32\1\17\1\2\1\0\1\62\1\14"+
    "\1\67\1\70\1\26\1\42\1\71\1\36\1\43\1\75\1\1\1\44"+
    "\1\64\1\13\1\65\1\40\1\72\1\63\1\41\1\37\1\12\1\74"+
    "\1\46\1\24\1\1\1\66\1\30\1\110\1\30\1\31\104\0\1\105"+
    "\35\0\1\77\1\0\1\73\5\0\1\107\3\0\1\76\uff12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\4\1\1\7\10\1\1\6\16\1\1\10\1\11\4\10"+
    "\1\12\5\10\1\13\3\10\1\0\1\14\1\0\2\14"+
    "\1\3\1\15\1\0\1\3\1\1\1\0\2\1\2\5"+
    "\1\16\1\17\1\20\1\21\1\22\2\1\1\0\35\1"+
    "\3\0\1\23\4\0\1\24\11\0\1\22\1\0\1\25"+
    "\1\3\1\26\2\3\1\15\1\3\1\27\1\0\2\1"+
    "\1\5\1\30\1\5\1\31\11\1\1\0\31\1\20\0"+
    "\1\3\1\0\2\1\1\5\1\0\5\1\1\0\21\1"+
    "\6\0\1\32\2\0\1\33\2\0\1\34\1\0\1\3"+
    "\1\0\1\5\11\1\1\35\5\1\12\0\1\3\1\5"+
    "\6\1\3\0\1\1\3\0\1\1\14\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0124\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0447\0\u0490\0\u0124\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd"+
    "\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845"+
    "\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d"+
    "\0\u0ad6\0\u0b1f\0\u0b68\0\u0124\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c"+
    "\0\u0124\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0124\0\u0e42"+
    "\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0447\0\u0faf\0\u0ff8\0\u1041"+
    "\0\u0124\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240"+
    "\0\u1289\0\u0124\0\u0124\0\u12d2\0\u0124\0\u131b\0\u1364\0\u13ad"+
    "\0\u03fe\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac"+
    "\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4"+
    "\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c"+
    "\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84"+
    "\0\u1ccd\0\u0124\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u0124\0\u1e3a"+
    "\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082"+
    "\0\u20cb\0\u2114\0\u0ff8\0\u215d\0\u0124\0\u21a6\0\u21ef\0\u108a"+
    "\0\u2238\0\u0124\0\u2281\0\u22ca\0\u2313\0\u235c\0\u0124\0\u23a5"+
    "\0\u0124\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4"+
    "\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec"+
    "\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34"+
    "\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c"+
    "\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4"+
    "\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c"+
    "\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354"+
    "\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c"+
    "\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4"+
    "\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c"+
    "\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74"+
    "\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc"+
    "\0\u0ad6\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb"+
    "\0\u4104\0\u414d\0\u4196\0\u0124\0\u41df\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u3c74\0\u4470\0\u3d4f"+
    "\0\u44b9\0\u3e2a\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626\0\u466f"+
    "\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e\0\u48b7"+
    "\0\u4900\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff"+
    "\0\u4b48\0\u4b91\0\u4bda\0\u4c23\0\u4c6c\0\u4cb5\0\u4cfe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\7\1\11\1\12"+
    "\1\5\1\6\1\13\1\14\1\15\1\7\2\5\1\16"+
    "\1\17\1\20\1\6\1\21\1\22\1\20\1\23\1\5"+
    "\1\23\1\24\2\20\1\6\1\25\1\26\1\27\1\30"+
    "\1\6\1\31\1\5\1\6\1\32\3\6\1\33\1\34"+
    "\1\35\1\36\3\6\1\37\1\40\1\41\2\6\1\42"+
    "\1\43\1\44\1\6\1\5\1\45\1\6\2\5\2\46"+
    "\1\47\1\46\1\50\1\5\1\6\1\51\1\52\10\53"+
    "\1\54\12\53\1\55\12\53\1\56\3\53\1\57\3\53"+
    "\1\60\52\53\1\61\12\53\1\62\12\53\1\63\3\53"+
    "\1\64\3\53\1\65\42\53\10\66\1\67\25\66\1\70"+
    "\3\66\1\71\3\66\1\72\42\66\112\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\16\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\2\0\3\74\2\7\1\74"+
    "\1\7\2\0\4\74\1\0\1\7\1\0\1\74\3\0"+
    "\1\74\1\75\1\76\7\0\7\74\1\0\6\74\1\0"+
    "\23\74\4\0\4\74\1\0\3\74\2\7\1\74\1\7"+
    "\2\0\4\74\1\0\1\7\1\0\1\74\3\0\1\77"+
    "\1\75\1\76\7\0\7\74\1\0\6\74\1\0\23\74"+
    "\4\0\4\74\1\0\7\100\1\101\1\102\1\103\77\100"+
    "\1\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\5\6\1\104\10\6\1\105\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\5\6\1\106\1\107\7\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\2\0\10\15\1\110\1\111\3\15"+
    "\1\112\73\15\21\0\1\16\32\0\1\16\56\0\1\113"+
    "\1\114\30\0\1\115\110\0\1\115\37\0\2\116\1\0"+
    "\1\116\7\0\1\116\73\0\6\6\2\0\1\73\1\6"+
    "\1\117\1\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\3\6\1\120\3\6\1\0\6\6\1\0\7\6"+
    "\1\104\6\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\35\0\1\121\56\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\6\6\1\122\7\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\5\6"+
    "\1\123\1\6\1\0\6\6\1\0\5\6\1\124\1\125"+
    "\1\6\1\126\5\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\127\7\0\7\6\1\0\6\6"+
    "\1\0\5\6\1\130\10\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\1\131\2\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\16\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\132\7\0\5\6\1\133"+
    "\1\6\1\0\6\6\1\0\5\6\1\134\10\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\2\6\1\135\3\6\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\36\23\0\1\16\3\0"+
    "\1\115\26\0\1\16\35\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\1\6\1\136\14\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\115\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\2\6"+
    "\1\137\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\7\6\1\140\1\6\1\141"+
    "\4\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\142\7\0\7\6\1\0\6\6\1\0\5\6"+
    "\1\143\2\6\1\144\5\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\145\7\0\7\6\1\0"+
    "\6\6\1\0\5\6\1\146\10\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\5\6"+
    "\1\147\1\150\1\0\6\6\1\0\10\6\1\151\5\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\152\7\0\5\6\1\153\1\6\1\0\6\6\1\0"+
    "\10\6\1\104\5\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\5\6\1\154\1\6"+
    "\1\0\6\6\1\0\6\6\1\155\7\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\156\7\0"+
    "\7\6\1\0\6\6\1\0\16\6\1\0\2\6\1\0"+
    "\1\157\4\0\1\6\1\0\1\6\56\0\1\115\24\0"+
    "\1\121\36\0\1\121\24\0\1\115\24\0\1\121\10\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\160\1\6\56\0\1\161"+
    "\144\0\1\121\10\53\1\0\12\53\1\0\12\53\1\0"+
    "\3\53\1\0\3\53\1\0\42\53\22\0\1\162\125\0"+
    "\1\163\110\0\1\164\3\0\1\165\113\0\1\166\64\0"+
    "\1\167\125\0\1\170\110\0\1\171\3\0\1\172\113\0"+
    "\1\173\42\0\10\66\1\0\25\66\1\0\3\66\1\0"+
    "\3\66\1\0\42\66\37\0\1\174\110\0\1\175\3\0"+
    "\1\176\113\0\1\177\54\0\1\200\76\0\7\74\2\0"+
    "\4\74\1\0\1\74\1\0\1\74\3\0\1\74\1\0"+
    "\1\74\7\0\7\74\1\0\6\74\1\0\23\74\4\0"+
    "\4\74\1\0\3\74\2\201\1\74\1\201\2\0\4\74"+
    "\1\0\1\201\1\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\202\4\0\1\202\1\0\7\74\1\0\6\74\1\0"+
    "\23\74\4\0\4\74\1\0\3\74\4\203\2\0\3\74"+
    "\1\203\1\0\1\203\1\0\1\74\3\0\1\74\1\0"+
    "\1\203\7\0\4\74\1\203\2\74\1\0\1\74\2\203"+
    "\3\74\1\0\1\74\1\203\1\74\1\203\1\74\1\203"+
    "\4\74\2\203\7\74\4\0\4\74\1\0\7\204\1\205"+
    "\1\0\100\204\7\0\1\205\101\0\4\204\1\206\1\204"+
    "\1\207\1\210\1\0\1\100\1\211\3\100\1\206\20\204"+
    "\1\100\2\204\1\100\20\204\1\100\25\204\1\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\212\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\67\0\1\213\24\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\5\6\1\214\1\6\1\0\6\6"+
    "\1\0\16\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\5\6\1\215\10\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\2\0\11\110\1\216\3\110\1\217\77\110\1\15"+
    "\1\110\2\15\1\0\1\15\1\220\4\15\20\110\1\15"+
    "\2\110\1\15\20\110\1\15\25\110\23\0\1\221\65\0"+
    "\3\74\2\116\1\74\1\116\2\0\4\74\1\0\1\116"+
    "\1\0\1\74\3\0\1\74\1\0\1\76\7\0\7\74"+
    "\1\0\6\74\1\0\23\74\4\0\4\74\2\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\1\6\1\222\5\6\1\0\6\6\1\0"+
    "\14\6\1\223\1\224\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\12\6\1\225\2\6\1\226\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\10\6\1\227\5\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\1\6\1\230\1\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\6\6\1\231\7\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\232\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\6\6\1\36\7\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\1\6\1\222\1\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\212"+
    "\16\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\0\16\6"+
    "\1\0\2\6\1\233\5\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\1\6\1\234\1\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\16\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\6\6\1\104\7\6\1\0\1\235\1\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\7\6\1\236\6\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\6\6\1\237\7\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\3\6\1\240\2\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\2\6\1\241\13\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\5\6\1\242"+
    "\10\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\0\5\6"+
    "\1\243\10\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\1\244\2\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\16\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\2\6\1\245\1\246\3\6"+
    "\1\0\6\6\1\0\16\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\5\6\1\247"+
    "\1\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\3\6"+
    "\1\231\3\6\1\0\6\6\1\0\16\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\1\6\1\250\1\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\5\6\1\251\1\6\1\0\6\6\1\0\14\6"+
    "\1\252\1\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\1\6\1\253\1\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\5\6\1\254\1\6\1\231\6\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\5\6\1\255\10\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\6\6\1\104"+
    "\7\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\3\6\1\256\3\6\1\0\6\6"+
    "\1\0\16\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\6\6\1\257\7\6\1\0\1\260\1\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\6\6\1\261\7\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\10\6\1\262\5\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\6\6\1\263\2\6\1\264"+
    "\4\6\1\0\2\6\6\0\1\6\1\0\1\6\56\0"+
    "\1\212\107\0\1\121\100\0\1\265\20\0\1\266\3\0"+
    "\1\267\57\0\1\270\111\0\1\271\114\0\1\272\112\0"+
    "\1\273\101\0\1\274\111\0\1\275\114\0\1\276\112\0"+
    "\1\277\101\0\1\300\111\0\1\301\114\0\1\302\112\0"+
    "\1\303\45\0\4\304\5\0\1\304\1\0\1\304\7\0"+
    "\1\304\13\0\1\304\4\0\2\304\5\0\1\304\1\0"+
    "\1\304\1\0\1\304\4\0\2\304\20\0\3\74\2\201"+
    "\1\74\1\201\2\0\4\74\1\0\1\201\1\0\1\74"+
    "\3\0\1\74\1\0\1\74\7\0\7\74\1\0\6\74"+
    "\1\0\23\74\4\0\4\74\4\0\2\201\1\0\1\201"+
    "\7\0\1\201\72\0\7\204\1\101\1\0\104\204\1\207"+
    "\1\204\1\207\1\205\1\0\5\204\1\207\76\204\1\100"+
    "\1\204\1\100\1\205\1\0\5\204\1\100\75\204\4\305"+
    "\1\101\1\0\3\204\1\305\1\204\1\305\7\204\1\305"+
    "\13\204\1\305\4\204\2\305\5\204\1\305\1\204\1\305"+
    "\1\204\1\305\4\204\2\305\20\204\54\0\1\306\35\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\307"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\1\6\1\310\1\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\16\6\1\0\2\6\6\0\1\6\1\0\1\6\2\0"+
    "\10\110\1\0\103\110\4\311\2\110\1\216\2\110\1\311"+
    "\1\217\1\311\7\110\1\311\13\110\1\311\4\110\2\311"+
    "\5\110\1\311\1\110\1\311\1\110\1\311\4\110\2\311"+
    "\20\110\1\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\16\6\1\312\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\6\6\1\313\7\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\1\314\2\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\16\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\1\255\2\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\6\6\1\315\7\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\1\316"+
    "\2\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\12\6\1\261\3\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\12\6\1\317\3\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\5\6\1\104\10\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\1\6\1\307\5\6\1\0\6\6\1\0"+
    "\16\6\1\0\2\6\6\0\1\6\1\0\1\6\72\0"+
    "\1\320\21\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\13\6\1\307\2\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\5\6\1\321\10\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\2\6"+
    "\1\261\4\6\1\0\6\6\1\0\16\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\5\6\1\322\10\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\4\6\1\323\1\6\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\3\6\1\324"+
    "\12\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\5\6\1\325\1\6\1\0\6\6"+
    "\1\0\16\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\6\6\1\326\7\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\6\6\1\104\1\0"+
    "\6\6\1\0\16\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\327\7\0\7\6\1\0\6\6"+
    "\1\0\16\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\1\6\1\330\5\6\1\0"+
    "\6\6\1\0\16\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\11\6\1\331\4\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\10\6\1\251\5\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\3\6"+
    "\1\36\3\6\1\0\6\6\1\0\16\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\332\7\0"+
    "\7\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\11\6\1\231\4\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\1\6\1\307\1\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\6\6\1\307\7\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\333\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\334"+
    "\7\0\7\6\1\0\6\6\1\0\16\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\5\6\1\335\1\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\5\6\1\151\10\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\3\6\1\336\3\6\1\0\6\6\1\0"+
    "\16\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\0\7\6"+
    "\1\337\3\6\1\340\2\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\341\7\0\7\6\1\0"+
    "\6\6\1\212\16\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\73\0\1\342\45\0\1\343\33\0\1\344\71\0"+
    "\1\345\105\0\1\346\115\0\1\347\71\0\1\271\107\0"+
    "\1\350\123\0\1\351\115\0\1\352\71\0\1\275\107\0"+
    "\1\353\123\0\1\354\115\0\1\355\71\0\1\301\107\0"+
    "\1\356\66\0\4\357\5\0\1\357\1\0\1\357\7\0"+
    "\1\357\13\0\1\357\4\0\2\357\5\0\1\357\1\0"+
    "\1\357\1\0\1\357\4\0\2\357\20\0\3\204\4\360"+
    "\1\101\1\0\3\204\1\360\1\204\1\360\7\204\1\360"+
    "\13\204\1\360\4\204\2\360\5\204\1\360\1\204\1\360"+
    "\1\204\1\360\4\204\2\360\20\204\107\0\1\361\2\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\0\10\6"+
    "\1\104\5\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\12\6\1\307\3\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\2\0\3\110\4\362\2\110\1\216\2\110\1\362"+
    "\1\217\1\362\7\110\1\362\13\110\1\362\4\110\2\362"+
    "\5\110\1\362\1\110\1\362\1\110\1\362\4\110\2\362"+
    "\20\110\65\0\1\157\24\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\10\6\1\363\5\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\5\6\1\364\10\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\365"+
    "\7\0\7\6\1\0\6\6\1\0\16\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\366\7\0"+
    "\7\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\244\7\0\7\6"+
    "\1\0\6\6\1\0\16\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\64\0\1\157\27\0\6\6\2\0\1\73"+
    "\1\6\1\367\1\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\1\6\1\370\1\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\5\6\1\104\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\2\6\1\371\3\6\1\0"+
    "\16\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\261"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\372\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\1\6\1\373\5\6\1\0\6\6\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\10\6\1\36"+
    "\5\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\0\6\6\1\374\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\1\6\1\375\1\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\7\6\1\0\6\6\1\0"+
    "\16\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\1\6\1\376\1\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\16\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\5\6\1\375\1\6\1\0"+
    "\6\6\1\0\16\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\13\6\1\377\2\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\3\6\1\u0100"+
    "\3\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\u0101\7\0\7\6"+
    "\1\0\6\6\1\0\16\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\104\7\0\7\6\1\0"+
    "\6\6\1\0\16\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\3\6\1\104\3\6"+
    "\1\0\6\6\1\0\16\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\14\0\1\u0102\111\0\1\u0103\140\0\1\u0103"+
    "\107\0\1\u0104\107\0\1\271\3\0\1\347\65\0\1\u0105"+
    "\67\0\1\350\1\u0106\4\350\1\u0106\2\0\3\350\1\0"+
    "\1\350\1\0\1\u0106\1\0\1\350\1\u0106\1\350\1\u0106"+
    "\1\350\1\u0106\1\0\5\u0106\7\350\1\u0106\6\350\1\0"+
    "\16\350\1\0\2\350\2\0\2\u0106\2\0\1\350\1\0"+
    "\1\350\43\0\1\275\3\0\1\352\65\0\1\u0107\67\0"+
    "\1\353\1\u0108\4\353\1\u0108\2\0\3\353\1\0\1\353"+
    "\1\0\1\u0108\1\0\1\353\1\u0108\1\353\1\u0108\1\353"+
    "\1\u0108\1\0\5\u0108\7\353\1\u0108\6\353\1\0\16\353"+
    "\1\0\2\353\2\0\2\u0108\2\0\1\353\1\0\1\353"+
    "\43\0\1\301\3\0\1\355\65\0\1\u0109\67\0\1\356"+
    "\1\u010a\4\356\1\u010a\2\0\3\356\1\0\1\356\1\0"+
    "\1\u010a\1\0\1\356\1\u010a\1\356\1\u010a\1\356\1\u010a"+
    "\1\0\5\u010a\7\356\1\u010a\6\356\1\0\16\356\1\0"+
    "\2\356\2\0\2\u010a\2\0\1\356\1\0\1\356\5\0"+
    "\4\u010b\5\0\1\u010b\1\0\1\u010b\7\0\1\u010b\13\0"+
    "\1\u010b\4\0\2\u010b\5\0\1\u010b\1\0\1\u010b\1\0"+
    "\1\u010b\4\0\2\u010b\20\0\3\204\4\u010c\1\101\1\0"+
    "\3\204\1\u010c\1\204\1\u010c\7\204\1\u010c\13\204\1\u010c"+
    "\4\204\2\u010c\5\204\1\u010c\1\204\1\u010c\1\204\1\u010c"+
    "\4\204\2\u010c\20\204\3\110\4\u010d\2\110\1\216\2\110"+
    "\1\u010d\1\217\1\u010d\7\110\1\u010d\13\110\1\u010d\4\110"+
    "\2\u010d\5\110\1\u010d\1\110\1\u010d\1\110\1\u010d\4\110"+
    "\2\u010d\20\110\1\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\3\6\1\u010e"+
    "\3\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\1\6"+
    "\1\232\1\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\0\6\6\1\0\16\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\16\6\1\0\1\u010f\1\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\6\6\1\u0110\7\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\1\6\1\261\5\6\1\0\6\6\1\0\16\6"+
    "\1\0\2\6\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\16\6\1\0"+
    "\1\6\1\231\6\0\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\73\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\0\6\6\1\0\3\6\1\u0111"+
    "\12\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\6\6\1\307\1\0\6\6\1\0"+
    "\16\6\1\0\2\6\6\0\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\73\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\7\0\5\6\1\151\1\6\1\0\6\6"+
    "\1\0\16\6\1\0\2\6\6\0\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\73\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\7\0\1\6\1\231\5\6\1\0"+
    "\6\6\1\0\16\6\1\0\2\6\6\0\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\73\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\7\0\7\6\1\0\6\6"+
    "\1\0\14\6\1\223\1\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\5\6\1\u0112"+
    "\1\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\1\124"+
    "\2\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\6\6"+
    "\1\u0113\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\64\0\1\u0114\113\0\1\u0115\51\0"+
    "\1\u0116\104\0\1\350\110\0\1\353\110\0\1\356\71\0"+
    "\4\6\5\0\1\6\1\0\1\6\7\0\1\6\13\0"+
    "\1\6\4\0\2\6\5\0\1\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\20\0\3\204\4\100\1\101\1\0"+
    "\3\204\1\100\1\204\1\100\7\204\1\100\13\204\1\100"+
    "\4\204\2\100\5\204\1\100\1\204\1\100\1\204\1\100"+
    "\4\204\2\100\20\204\3\110\4\15\2\110\1\216\2\110"+
    "\1\15\1\217\1\15\7\110\1\15\13\110\1\15\4\110"+
    "\2\15\5\110\1\15\1\110\1\15\1\110\1\15\4\110"+
    "\2\15\20\110\1\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\3\6\1\261"+
    "\3\6\1\0\6\6\1\0\16\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\151\7\0\7\6"+
    "\1\0\6\6\1\0\16\6\1\0\2\6\6\0\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\13\6\1\231\2\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\1\6\1\u0117\14\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\3\0\6\6\2\0\1\73"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\7\0"+
    "\7\6\1\0\6\6\1\0\13\6\1\330\2\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\73\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\7\0\1\307\6\6\1\0\6\6\1\0\16\6\1\0"+
    "\2\6\6\0\1\6\1\0\1\6\46\0\1\u0118\127\0"+
    "\1\u0119\110\0\1\u011a\26\0\6\6\2\0\1\73\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\7\0\7\6"+
    "\1\0\6\6\1\0\4\6\1\u011b\11\6\1\0\2\6"+
    "\6\0\1\6\1\0\1\6\56\0\1\u011c\110\0\1\u011d"+
    "\62\0\1\u011e\63\0\6\6\2\0\1\73\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\7\0\7\6\1\0"+
    "\6\6\1\0\2\6\1\323\13\6\1\0\2\6\6\0"+
    "\1\6\1\0\1\6\64\0\1\121\113\0\1\u011f\4\0"+
    "\1\u0120\31\0\1\u0121\107\0\1\u0122\110\0\1\u0123\135\0"+
    "\1\u0124\125\0\1\u0125\62\0\1\121\110\0\1\u0126\125\0"+
    "\1\265\121\0\1\u0127\124\0\1\u0123\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19783];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\10\1\1\11\30\1\1\11"+
    "\4\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\3\1\1\11\1\0\2\1\1\0\4\1\2\11\1\1"+
    "\1\11\3\1\1\0\35\1\3\0\1\11\4\0\1\11"+
    "\11\0\1\1\1\0\2\1\1\11\4\1\1\11\1\0"+
    "\3\1\1\11\1\1\1\11\11\1\1\0\31\1\20\0"+
    "\1\1\1\0\3\1\1\0\5\1\1\0\21\1\6\0"+
    "\1\1\2\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\12\1\1\11\5\1\12\0\10\1\3\0\1\1\3\0"+
    "\1\1\14\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AuroraLogoSyntaxHighlighter() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AuroraLogoSyntaxHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AuroraLogoSyntaxHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 30: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 22: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 33: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 35: break;
        case 24: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 36: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 37: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 38: break;
        case 23: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 40: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 29: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 45: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 46: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 47: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 48: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 49: break;
        case 25: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 50: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 17: 
          { addToken(Token.OPERATOR);
          }
        case 56: break;
        case 8: 
          { 
          }
        case 57: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 296: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 297: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 298: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 299: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
